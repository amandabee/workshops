is.na(pmerge[28, ]$city.f)
is.na(pmerge[27, ]$city.f)
is.na(pmerge[29, ]$city.f)
pmerge[27;29, ]
pmerge[27:29, ]
pmerge[27:29, ]$city.f
pmerge[27:29, ]$city.r
is.na(pmerge[28, ]$city.r)
for (j in 1:30) {
print(j)
ifelse(is.na(pmerge[j, ]$city.r), print(j),
fac <- c(pmerge[j, ]$)lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.03)
)
}
for (j in 1:30) {
print(j)
if(!is.na(pmerge[j, ]$city.r):
fac <- c(pmerge[j, ]$)lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.03)
)
}
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:25) {
print(j)
fac <- c(pmerge[j, ]$)lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.03)
}
for (j in 1:25) {
print(j)
}
for (j in 1:25) {
print(j)
fac <- c(pmerge[j, ]$)lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
}
for (j in 1:25) {
fac <- c(pmerge[j, ]$)lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
}
for (j in 1:25) {
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
}
for (j in 1:25) {
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.03)
}
for (j in 1:25) {
#print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
}
for (j in 1:25) {
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
}
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:25) {
print(j)
ifelse(!is.naif(!is.na(pmerge[j, ]$city.r,
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
, print(j))
}
for (j in 1:25) {
print(j)
ifelse(!is.na(pmerge[j, ]$city.r,
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
, print(j))
}
for (j in 1:25) {
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
ifelse(!is.na(pmerge[j, ]$city.r), lines(inter, col="black", lwd=1.03), print(j))
}
for (j in 1:25) {
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
ifelse(is.na(pmerge[j, ]$city.r), print(j), lines(inter, col="black", lwd=1.03), )
}
for (j in 1:25) {
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
ifelse(is.na(pmerge[j, ]$city.r), print(j), lines(inter, col="black", lwd=1.03))
}
fac
res
inter
lines(inter, col="red", lwd=2)
?for
?
for (j in 1:25) {
print(j)
if(is.na(pmerge[j, ]$city.r), next)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
}
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:25) {
if(is.na(pmerge[j, ]$city.r), next)
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
}
for (j in 1:25) {
ifelse(is.na(pmerge[j, ]$city.r), next)
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
}
for (j in 1:25) {
ifelse(is.na(pmerge[j, ]$city.r), next, p <- j)
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
}
p
for (j in 1:30) {
ifelse(is.na(pmerge[j, ]$city.r), next, p <- j)
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=1.03)
}
p
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:length(pmerge$city.f)) {
#for (j in 1:30) {
ifelse(is.na(pmerge[j, ]$city.r), next, p <- j)
print(j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.03)
}
for (j in 1:length(pmerge$city.f)) {
#for (j in 1:30) {
ifelse(is.na(pmerge[j, ]$city.r), next, p <- j)
done <-cbind(done, j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.03)
}
done<- 0
for (j in 1:length(pmerge$city.f)) {
#for (j in 1:30) {
ifelse(is.na(pmerge[j, ]$city.r), next, p <- j)
done <-cbind(done, j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.03)
}
View(done)
View(done)
append(1:5, 0:1, after = 3)
append(1:5, 0:1, after = 2)
append(1:5, 0:1)
append(1:5, 0:5)
done<- 0
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
done<- 0
for (j in 1:length(pmerge$city.f)) {
#for (j in 1:30) {
ifelse(is.na(pmerge[j, ]$city.r), next, p <- j)
done <-append(done,j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.08)
}
?ifelse
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
done<- 0
for (j in 1:length(pmerge$city.f)) {
#for (j in 1:30) {
ifelse(is.na(pmerge[j, ]$city.r), next, NA)
#done <- append(done,j)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.08)
}
psub <- prisoners[prisoners$zipcode.f == 96819, ]
drops <- c("Facility_ZIP", "Residence_ZIP")
psub <- psub[, !names(psub) %in% drops]
pmerge <- merge(psub, zipcode, by.x="zipcode.f", by.y="zip")
names(pmerge)
names(pmerge)[8:11] <- c("city.f", "state.f", "lat.f", "lon.f")
pmerge <- merge(pmerge, zipcode, by.x="zipcode.r", by.y="zip", all.x = TRUE, all.y = FALSE)
names(pmerge)
names(pmerge)[12:15] <- c("city.r", "state.r", "lat.r", "lon.r")
#### Draw the lines
library(geosphere)
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:length(pmerge$city.f)) {
ifelse(is.na(pmerge[j, ]$city.r), next, NA)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.08)
}
View(pmerge)
psub <- prisoners
drops <- c("Facility_ZIP", "Residence_ZIP")
psub <- psub[, !names(psub) %in% drops]
pmerge <- merge(psub, zipcode, by.x="zipcode.f", by.y="zip")
names(pmerge)
names(pmerge)[8:11] <- c("city.f", "state.f", "lat.f", "lon.f")
pmerge <- merge(pmerge, zipcode, by.x="zipcode.r", by.y="zip", all.x = TRUE, all.y = FALSE)
names(pmerge)
names(pmerge)[12:15] <- c("city.r", "state.r", "lat.r", "lon.r")
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:length(pmerge$city.f)) {
ifelse(is.na(pmerge[j, ]$city.r), next, NA)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.08)
}
avg.dist.by.fac <- data.frame(tapply(prisoners$Distance, prisoners$zipcode.f, function(x), mean(x)))
avg.dist.by.fac <- data.frame(tapply(prisoners$Distance, prisoners$zipcode.f, function(x) mean(x)))
avg.dist.by.res <- data.frame(tapply(prisoners$Distance, prisoners$zipcode.r, function(x) mean(x)))
mean(psub$Distance)
View(avg.dist.by.fac)
View(avg.dist.by.res)
names(avg.dist.by.fac) <- c("zipcode.f", "avg.distance")
names(avg.dist.by.fac)
names(avg.dist.by.fac) <- c("avg.distance")
names(avg.dist.by.res) <- c("avg.distance")
fac.tmp <- data.frame(tapply(prisoners$zipcode.r, prisoners$zipcode.f, function(x) unique(x)))
View(fac.tmp)
?tapply
ind <- list(c(1, 2, 2), c("A", "A", "B"))
table(ind)
tapply(1:3, ind) #-> the split vector
tapply(1:3, ind, sum)
ind
table(ind)
table(fac.tmp)
avg.dist.by.fac <- data.frame(tapply(prisoners$Distance, prisoners$zipcode.f, function(x) mean(x), na.rm = TRUE))
avg.dist.by.fac <- data.frame(tapply(prisoners$Distance, prisoners$zipcode.f, mean, na.rm = TRUE))
mean(psub$Distance)
mean(psub$Distance, na.rm = TRUE)
mean(psub$Distance, na.rm = FALSE)
View(avg.dist.by.fac)
psub <- prisoners[prisoners$zipcode.f == 96819, ]
psub <- prisoners
drops <- c("Facility_ZIP", "Residence_ZIP")
psub <- psub[, !names(psub) %in% drops]
pmerge <- merge(psub, zipcode, by.x="zipcode.f", by.y="zip")
names(pmerge)
names(pmerge)[8:11] <- c("city.f", "state.f", "lat.f", "lon.f")
pmerge <- merge(pmerge, zipcode, by.x="zipcode.r", by.y="zip", all.x = TRUE, all.y = FALSE)
names(pmerge)
names(pmerge)[12:15] <- c("city.r", "state.r", "lat.r", "lon.r")
library(geosphere)
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:length(pmerge$city.f)) {
ifelse(is.na(pmerge[j, ]$city.r), next, NA)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.08)
}
psub <- prisoners[prisoners$zipcode.f == 12977, ]
drops <- c("Facility_ZIP", "Residence_ZIP")
psub <- psub[, !names(psub) %in% drops]
pmerge <- merge(psub, zipcode, by.x="zipcode.f", by.y="zip")
names(pmerge)
names(pmerge)[8:11] <- c("city.f", "state.f", "lat.f", "lon.f")
pmerge <- merge(pmerge, zipcode, by.x="zipcode.r", by.y="zip", all.x = TRUE, all.y = FALSE)
View(facilities)
pmerge <- merge(psub, zipcode, by.x="zipcode.f", by.y="zip")
names(pmerge)
names(pmerge)[8:11] <- c("city.f", "state.f", "lat.f", "lon.f")
pmerge <- merge(pmerge, zipcode, by.x="zipcode.r", by.y="zip", all.x = TRUE, all.y = FALSE)
names(pmerge)
names(pmerge)[12:15] <- c("city.r", "state.r", "lat.r", "lon.r")
#### Draw the lines
library(geosphere)
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:length(pmerge$city.f)) {
ifelse(is.na(pmerge[j, ]$city.r), next, NA)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.08)
}
View(pmerge)
pmerge
pmerge[is.na(pmerge$city.r), ]
pmerge[is.na(pmerge$city.r), pmerge$zipcode.r]
pmerge[is.na(pmerge$city.r), c(1,2)]
pmerge[is.na(pmerge$city.r), c(1,8:14)]
pmerge[is.na(pmerge$city.r), c(1:2,8:14)]
pmerge[is.na(pmerge$city.r), c(1)]
full.merge <- merge(prisoners, zipcode, by.x="zipcode.f", by.y="zip")
drops <- c("Facility_ZIP", "Residence_ZIP")
full.merge <- full.merge[, !names(full.merge) %in% drops]
names(full.merge)
names(full.merge)[8:11] <- c("city.f", "state.f", "lat.f", "lon.f")
full.merge <- merge(full.merge, zipcode, by.x="zipcode.r", by.y="zip", all.x = TRUE, all.y = FALSE)
full.merge[is.na(full.merge$city.r), c(1)]
View(full.merge)
names(full.merge)
names(full.merge)[12:15] <- c("city.r", "state.r", "lat.r", "lon.r")
full.merge[is.na(full.merge$city.r), c(1)]
unique(full.merge[is.na(full.merge$city.r), c(1)])
bad.zips <- unique(full.merge[is.na(full.merge$city.r), c(1)])
bad.zips.all <- full.merge[is.na(full.merge$city.r), c(1)]
psub <- prisoners[prisoners$zipcode.f == 93436, ]
drops <- c("Facility_ZIP", "Residence_ZIP")
psub <- psub[, !names(psub) %in% drops]
pmerge <- merge(psub, zipcode, by.x="zipcode.f", by.y="zip")
names(pmerge)
names(pmerge)[8:11] <- c("city.f", "state.f", "lat.f", "lon.f")
pmerge <- merge(pmerge, zipcode, by.x="zipcode.r", by.y="zip", all.x = TRUE, all.y = FALSE)
names(pmerge)
names(pmerge)[12:15] <- c("city.r", "state.r", "lat.r", "lon.r")
#### Draw the lines
library(geosphere)
map("world", col="#f2f2f2", fill=TRUE, bg="#FFFFFF", lwd=0.05, xlim=xlim, ylim=ylim)
for (j in 1:length(pmerge$city.f)) {
ifelse(is.na(pmerge[j, ]$city.r), next, NA)
fac <- c(pmerge[j, ]$lon.f, pmerge[j, ]$lat.f)
res <- c(pmerge[j, ]$lon.r, pmerge[j, ]$lat.r)
inter <- gcIntermediate(fac, res, n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.08)
}
View(pmerge)
class(inter)
type(inter)
typeof(inter)
View(inter)
View(BOP_distance_for_AA.12_18_13)
View(BOP_distance_for_AA.12_18_13)
prisoners[prisoners$state == 'FL', ]
names(prisoners)
View(avg.dist.by.res)
View(full.merge)
full.merge[full.merge$state == 'FL', ]
full.merge[full.merge$state.r == 'FL', ]
full.merge[full.merge$state.r == 'FL', c('city.r','state.r')]
full.merge[full.merge$state.r == 'FL', c('city.r','state.r', 'latitude')]
names(full.merge)
full.merge[full.merge$state.r == 'FL', c('city.r','state.r', 'lat.r','lon.r')]
View(pmerge)
View(avg.dist.by.res)
pmerge[pmerge$state.r == 'FL', c('city.r','state.r', 'lat.r','lon.r')]
write.csv(pmerge[pmerge$state.r == 'FL', c('city.r','state.r', 'lat.r','lon.r')], "test.csv")
load(zipcode)
load(zipcodes)
library(zipcodes)
library(zipcode)
View(zipcode)
311 <- read.csv('Downloads/311_Service_Requests_from_2010_to_Present.csv')
all_311 <- read.csv('Downloads/311_Service_Requests_from_2010_to_Present.csv')
311+1
all_311 <- read.csv('Downloads/311_Service_Requests_from_2010_to_Present.csv')
smaller_311 <- all_311[10,]
View(smaller_311)
View(all_311)
View(all_311)
smaller_311 <- all_311[1:20,]
names(smaller_311)
complaints.by.dept <- by(smaller_311, smaller_311[, Agency])
complaints.by.dept <- by(smaller_311, smaller_311$Agency)
complaints.by.dept <- by(smaller_311, smaller_311$Agency, summary)
fix(complaints.by.dept)
complaints.by.dept <- by(smaller_311$Complaint.Type, smaller_311$Agency, summary)
fix(complaints.by.dept)
tabulate(smaller_311)
smaller.311 <- all.311[1:20,]
smaller.311 <- all_311[1:20,]
complaints.by.dept <-table(smaller.311$Agency)
fix(complaints.by.dept)
complaints.by.dept <- as.data.frame(complaints.by.dept)
View(complaints.by.dept)
rm(smaller_311)
table(smaller.311)
complaint.type.by.dept <- table(smaller.311$Agency,smaller.311$Complaint.Type)
fix(complaint.type.by.dept)
complaint.type.by.dept <- as.data.frame(table(smaller.311$Agency,smaller.311$Complaint.Type))
View(complaint.type.by.dept)
names(complaint.type.by.dept)
subset(complaint.type.by.dept, Freq > 0)
complaint.type.by.dept[complaint.type.by.dept$Freq > 0, ]
complaint.type.by.dept <- as.data.frame(table(all_311$Agency,all_311$Complaint.Type))
View(complaint.type.by.dept)
complaint.type.by.dept <- complaint.type.by.dept[complaint.type.by.dept$Freq > 0, ]
View(complaint.type.by.dept)
order(complaint.type.by.dept$Freq)
order(complaint.type.by.dept$Freq)
summary(complaint.type.by.dept$Freq)
rm(complaints.by.dept)
complaint.type.by.dept[complaint.type.by.dept$Freq > 20000, ]
subset(complaint.type.by.dept, grepl("*cat*",complaint.type.by.dept$Var2))
subset(complaint.type.by.dept, grepl("*dog*",complaint.type.by.dept$Var2))
subset(complaint.type.by.dept, grepl("*animal*",complaint.type.by.dept$Var2))
subset(complaint.type.by.dept, grepl("*Animal*",complaint.type.by.dept$Var2))
subset(complaint.type.by.dept, grepl("dog*",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, grepl("dog",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, grepl("animal",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, grepl("cat",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, grepl("cat|dog",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, grepl("dog",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, grepl("cat",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, grepl("cat|dog|animal|bird",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, grepl("cat|dog|animal|bird|lizard",complaint.type.by.dept$Var2, ignore.case=TRUE))
subset(complaint.type.by.dept, complaint.type.by.dept$Var1 = "DOHMH")
subset(complaint.type.by.dept, complaint.type.by.dept$Var1 == "DOHMH")
view(complaint.type.by.dept)
View(complaint.type.by.dept)
names(complaint.type.by.dept)
names(complaint.type.by.dept) <- c("Agency", "Complaint Type", "Freq")
names(complaint.type.by.dept)
names(complaint.type.by.dept) <- c("Agency", "Complaint.Type", "Freq")
names(complaint.type.by.dept)
shaolin <- read.csv(file="/home/amanda/Public/cunyjdata/lecture notes/cartodb/pluto/SI.csv")
nycha.blocks <- c(196,1248, 545)
nycha.lots <- c(1, 200, 100)
nycha.bbl <- paste(nycha.blocks,nycha.lots)
which(shaolin$Block==196 & shaolin$Lot==1)
shaolin[ which(shaolin$Block==196 & shaolin$Lot==1), ]
nycha <- shaolin[ which(shaolin$Block==196 & shaolin$Lot==1), ]
View(nycha)
nycha <- shaolin[ which(shaolin$OwnerName=="NEW YORK CITY HOUSING"), ]
View(nycha)
x <-
1
x <- 1:20
x
setwd("Public/workshops/2015/Intro to R")
setwd("Public/workshops/2015/Intro to R")
food.trucks <- read.csv("Mobile_Food_Facility_Permit.csv")
lapply(food.trucks, class)
classes <- lapply(food.trucks, class)
classes
class(food.trucks$NOISent)
food.trucks$NOISent
column.classes <- c("integer", "character", "factor", "integer", "character", "character", "integer", "integer", "integer", "character", "factor", "character", "integer", "integer", "numeric", "numeric", "character", "character", "character", "character", "factor", "character", "character")
food.trucks.alt <- read.csv("Mobile_Food_Facility_Permit.csv", colClasses = column.classes)
column.classes <- c("integer", "character", "factor", "integer", "character", "character",
"integer", "integer", "integer", "character", "factor", "character",
"numeric", "numeric", "numeric", "numeric", "character", "character",
"character", "character", "factor", "character", "character"
)
column.classes <- c("integer", "character", "factor", "integer", "character", "character",
"integer", "integer", "integer", "character", "factor", "character",
"numeric", "numeric", "numeric", "numeric", "character", "character",
"character", "character", "factor", "character", "character")
food.trucks.alt <- read.csv("Mobile_Food_Facility_Permit.csv", colClasses = column.classes)
column.classes <- c("integer", "character", "factor", "integer", "character", "character",
"character", "integer", "integer", "character", "factor", "character",
"numeric", "numeric", "numeric", "numeric", "character", "character",
"character", "character", "factor", "character", "character")
food.trucks.alt <- read.csv("Mobile_Food_Facility_Permit.csv", colClasses = column.classes)
column.classes <- c("integer", "character", "factor", "integer", "character", "character",
"character", "character", "integer", "character", "factor", "character",
"numeric", "numeric", "numeric", "numeric", "character", "character",
"character", "character", "factor", "character", "character")
food.trucks.alt <- read.csv("Mobile_Food_Facility_Permit.csv", colClasses = column.classes)
source('~/Public/workshops/2015/Intro to R/notes.R', echo=TRUE)
column.classes <- c("integer", "character", "factor", "integer", "character", "character",
"character", "integer", "character", "character", "factor", "character",
"numeric", "numeric", "numeric", "numeric", "character", "character",
"character", "character", "factor", "character", "character")
food.trucks.alt <- read.csv("Mobile_Food_Facility_Permit.csv", colClasses = column.classes)
column.classes <- c("integer", "character", "factor", "integer", "character", "character",
"character", "character", "character", "character", "factor", "character",
"numeric", "numeric", "numeric", "numeric", "character", "character",
"character", "character", "factor", "character", "character")
food.trucks.alt <- read.csv("Mobile_Food_Facility_Permit.csv", colClasses = column.classes)
save.image("~/Public/workshops/2015/Intro to R/workspace.r.RData")
